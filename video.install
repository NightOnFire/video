<?php
/**
 * @file
 * Provides installation functions for video.module.
 *
 * @author Heshan Wanigasooriya <heshan at heidisoft dot com>
 *                              <heshanmw at gmail dot com>
 */

/**
 * Implementation of hook_schema().
 */
function video_schema() {
  $schema = array();
  
  $schema['video_files'] = array(
    'description' => t('Store video transcoding queue'),
    'fields' => array(
      'vid' => array(
        'description' => t('Video id'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'fid' => array(
        'description' => t('Original file id'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => t('Node id'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => t('Status of the transcoding'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'dimensions' => array(
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
        'description' => t('The dimensions of the video.'),
      ),
      'started' => array(
        'description' => t('Started transcodings'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'completed' => array(
        'description' => t('Transcoding completed'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'A serialized array of converted files. Use of this field is discouraged and it will likely disappear in a future version of Drupal.',
      ),
    ),
    'indexes' => array(
      'status' => array('status'),
      'file' => array('fid'),
    ),
    'primary key' => array('vid'),
  );

  $schema['video_preset_settings'] = array(
    'description' => t('Stores preset settings per transcoder'),
    'fields' => array(
      'preset' => array(
        'type' => 'varchar',
        'length' => 30,
        'default' => '',
        'description' => t('The unique key of the preset'),
        'not null' => TRUE,
      ),
      'transcoder' => array(
        'type' => 'varchar',
        'length' => 30,
        'default' => '',
        'description' => t('The unique key of the transcoder'),
        'not null' => TRUE,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => t('The serialized settings'),
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('preset', 'transcoder'),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function video_install() {
  drupal_install_schema('video');
  
  // Add legacy 4.x presets
  db_query('INSERT INTO {video_preset_settings} SET preset="%s", transcoder="%s", data = "%s"', 'hq_flash', 'video_ffmpeg', 'a:3:{s:8:"commands";a:1:{i:0;s:84:"!cmd_path -i !videofile -s !widthx!height -r 15 -b 250 -ar 22050 -ab 48 !convertfile";}s:11:"useflvtool2";i:1;s:14:"useqtfaststart";i:0;}');
  db_query('INSERT INTO {video_preset_settings} SET preset="%s", transcoder="%s", data = "%s"', 'html5_mp4', 'video_ffmpeg', 'a:3:{s:8:"commands";a:2:{i:0;s:128:"!cmd_path -strict experimental -y -i !videofile -pass 1 -vcodec libx264 -b 500k -threads 0 -vpre slow_firstpass -an !convertfile";i:1;s:135:"!cmd_path -strict experimental -y -i !videofile -pass 2 -vcodec libx264 -b 500k -threads 0 -vpre slow -acodec aac -ab 128k !convertfile";}s:11:"useflvtool2";i:0;s:14:"useqtfaststart";i:1;}');
  db_query('INSERT INTO {video_preset_settings} SET preset="%s", transcoder="%s", data = "%s"', 'html5_ogv', 'video_ffmpeg', 'a:3:{s:8:"commands";a:1:{i:0;s:91:"ffmpeg2theora --videobitrate 500 --max_size !widthx!height --output !convertfile !videofile";}s:11:"useflvtool2";i:0;s:14:"useqtfaststart";i:0;}');
  db_query('INSERT INTO {video_preset_settings} SET preset="%s", transcoder="%s", data = "%s"', 'html5_webm', 'video_ffmpeg', 'a:3:{s:8:"commands";a:2:{i:0;s:174:"!cmd_path -pass 1 -threads 16  -keyint_min 0 -g 250 -skip_threshold 0 -qmin 1 -qmax 51 -i !videofile -vcodec libvpx -b 204800 -s !widthx!height -aspect 4:3 -an -f webm -y NUL";i:1;s:198:"!cmd_path -y -pass 2 -threads 16  -keyint_min 0 -g 250 -skip_threshold 0 -qmin 1 -qmax 51 -i !videofile -vcodec libvpx -b 204800 -s !widthx!height -aspect 4:3 -acodec libvorbis -ac 2 -y !convertfile";}s:11:"useflvtool2";i:0;s:14:"useqtfaststart";i:0;}');
  db_query('INSERT INTO {video_preset_settings} SET preset="%s", transcoder="%s", data = "%s"', 'iphone_mov', 'video_ffmpeg', 'a:3:{s:8:"commands";a:1:{i:0;s:183:"!cmd_path -strict experimental -i !videofile -f mp4 -vcodec mpeg4 -maxrate 1000k -b 700k -qmin 3 -qmax 5 -bufsize 4096k -g 300 -acodec aac -ab 192k -s 320x240 -aspect 4:3 !convertfile";}s:11:"useflvtool2";i:0;s:14:"useqtfaststart";i:1;}');
}

/**
 * Implementation of hook_uninstall().
 */
function video_uninstall() {
  drupal_uninstall_schema('video');

  // Delete all variables that begin with the namespaced "video_*"
  $result = db_query('SELECT name FROM {variable} WHERE name LIKE "video_%%"');
  while ($var = db_fetch_array($result)) {
    variable_del($var['name']);
  }

  variable_del('vid_filesystem');
  variable_del('vid_convertor');
  variable_del('vid_preset');
}

/**
* Implementation of hook_requirements().
*/
function video_requirements($phase) {
  $t = get_t();
  $requirements = array();

  $fs = variable_get('vid_filesystem', 'drupal');
  $downloads = variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC);

  if ($downloads == FILE_DOWNLOADS_PRIVATE && $fs == 'drupal') {
    $requirements['video_filesystem'] = array(
      'title' => $t('Video module settings'),
      'description' => $t('Storing videos in the Drupal file system is not supported when using <a href="@filesystem">private downloads</a>.', array('@filesystem' => url('admin/settings/file-system'))),
      'value' => l($t('Change setting'), 'admin/settings/video/filesystem'),
      'severity' => REQUIREMENT_ERROR,
    );
  }

  return $requirements;
}

/**
 * Update 6405
 * dropping video_rendering table and creating video_files
 * @return <type>
 */
function video_update_6405() {
  $ret = array();

  db_drop_table($ret, 'video_rendering}');
  db_drop_table($ret, 'video_files}');

  $table = array(
    'description' => t('Store video transcoding queue'),
    'fields' => array(
  	  'vid' => array(
        'description' => t('Video id'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'fid' => array(
        'description' => t('Original file id'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => t('Node id'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
	  'filename' => array(
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
        'description' => t('The filename of the video.'),
      ),
	  'filepath' => array(
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
        'description' => t('The filepath of the video.'),
      ),
	  'filemime' => array(
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
        'description' => t('The filemime of the video.'),
      ),
      'filesize' => array(
        'description' => t('Filesize of the video.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'dimensions' => array(
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
        'description' => t('The dimensions of the video.'),
      ),
      'status' => array(
        'description' => t('Status of the transcoding'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'started' => array(
        'description' => t('Started transcodings'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'completed' => array(
        'description' => t('Transcoding completed'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'status' => array('status'),
      'file' => array('fid'),
    ),
    'primary key' => array('vid'),
  );

  db_create_table($ret, 'video_files', $table);

  return $ret;
}

/**
 * Update 6406
 * @return <type>
 */
function video_update_6406() {
  drupal_set_message('The system has reset your thumbnail and ffmpeg command settings to their original state.  If you made adjustments to these commands, you will have to reset them up.');
//lets reset our ffmpeg system command variables.
  variable_set('video_ffmpeg_thumbnailer_options', '-i !videofile -an -y -f mjpeg -ss !seek -vframes 1 !thumbfile');
  variable_set('video_ffmpeg_helper_auto_cvr_options', '-y -i !videofile -f flv -ar 22050 -ab !audiobitrate -s !size -b !videobitrate -qscale 1 !convertfile');
  return array();
}

/**
 * Update 6407
 */
function video_update_6407() {
  $ret = array();
// drop un wanted fields in video files
  db_drop_field($ret, 'video_files', 'filesize');
  db_drop_field($ret, 'video_files', 'filename');
  db_drop_field($ret, 'video_files', 'filepath');
  db_drop_field($ret, 'video_files', 'filemime');
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_add_column($ret, 'video_files', 'data', 'longtext', array('null' => TRUE));
      break;
    case 'pgsql':
      db_add_column($ret, 'video_files', 'data', 'text', array('null' => TRUE));
      break;
  }
  return $ret;
}

/**
 * Create the video_preset_settings table and populate with legacy preset settings.
 */
function video_update_6500() {
  $table = array(
    'description' => t('Stores preset settings per transcoder'),
    'fields' => array(
      'preset' => array(
        'type' => 'varchar',
        'length' => '30',
        'default' => '',
        'description' => t('The unique key of the preset'),
        'not null' => FALSE,
      ),
      'transcoder' => array(
        'type' => 'varchar',
        'length' => '30',
        'default' => '',
        'description' => t('The unique key of the transcoder'),
        'not null' => FALSE,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => t('The serialized settings'),
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('preset', 'transcoder'),
  );

  $ret = array();
  
  db_create_table($ret, 'video_preset_settings', $table);
  
  // Add legacy 4.x presets
  db_query('INSERT INTO {video_preset_settings} SET preset="%s", transcoder="%s", data = "%s"', 'hq_flash', 'video_ffmpeg', 'a:3:{s:8:"commands";a:1:{i:0;s:84:"!cmd_path -i !videofile -s !widthx!height -r 15 -b 250 -ar 22050 -ab 48 !convertfile";}s:11:"useflvtool2";i:1;s:14:"useqtfaststart";i:0;}');
  db_query('INSERT INTO {video_preset_settings} SET preset="%s", transcoder="%s", data = "%s"', 'html5_mp4', 'video_ffmpeg', 'a:3:{s:8:"commands";a:2:{i:0;s:128:"!cmd_path -strict experimental -y -i !videofile -pass 1 -vcodec libx264 -b 500k -threads 0 -vpre slow_firstpass -an !convertfile";i:1;s:135:"!cmd_path -strict experimental -y -i !videofile -pass 2 -vcodec libx264 -b 500k -threads 0 -vpre slow -acodec aac -ab 128k !convertfile";}s:11:"useflvtool2";i:0;s:14:"useqtfaststart";i:1;}');
  db_query('INSERT INTO {video_preset_settings} SET preset="%s", transcoder="%s", data = "%s"', 'html5_ogv', 'video_ffmpeg', 'a:3:{s:8:"commands";a:1:{i:0;s:91:"ffmpeg2theora --videobitrate 500 --max_size !widthx!height --output !convertfile !videofile";}s:11:"useflvtool2";i:0;s:14:"useqtfaststart";i:0;}');
  db_query('INSERT INTO {video_preset_settings} SET preset="%s", transcoder="%s", data = "%s"', 'html5_webm', 'video_ffmpeg', 'a:3:{s:8:"commands";a:2:{i:0;s:174:"!cmd_path -pass 1 -threads 16  -keyint_min 0 -g 250 -skip_threshold 0 -qmin 1 -qmax 51 -i !videofile -vcodec libvpx -b 204800 -s !widthx!height -aspect 4:3 -an -f webm -y NUL";i:1;s:198:"!cmd_path -y -pass 2 -threads 16  -keyint_min 0 -g 250 -skip_threshold 0 -qmin 1 -qmax 51 -i !videofile -vcodec libvpx -b 204800 -s !widthx!height -aspect 4:3 -acodec libvorbis -ac 2 -y !convertfile";}s:11:"useflvtool2";i:0;s:14:"useqtfaststart";i:0;}');
  db_query('INSERT INTO {video_preset_settings} SET preset="%s", transcoder="%s", data = "%s"', 'iphone_mov', 'video_ffmpeg', 'a:3:{s:8:"commands";a:1:{i:0;s:183:"!cmd_path -strict experimental -i !videofile -f mp4 -vcodec mpeg4 -maxrate 1000k -b 700k -qmin 3 -qmax 5 -bufsize 4096k -g 300 -acodec aac -ab 192k -s 320x240 -aspect 4:3 !convertfile";}s:11:"useflvtool2";i:0;s:14:"useqtfaststart";i:1;}');
  
  // Transform vid_preset variable to something that does not have a 0 as potential value
  $presets = variable_get('vid_preset', array('hq_flash'));
  $presets = array_diff($presets, array(0));
  $presets = array_values($presets);
  variable_set('vid_preset', $presets);
  
  // Rename metadata settings
  variable_set('video_dimensions', variable_get('video_metadata_dimensions', video_default_dimensions()));
  variable_set('video_flvtool2_path', variable_get('video_metadata_path', '/usr/bin/flvtool2'));
  
  // Remove old settings
  variable_del('vid_metadata');
  variable_del('video_metadata');
  variable_del('video_metadata_dimensions');
  variable_del('video_metadata_path');
  variable_del('video_ffmpeg_enable_faststart');
  
  return $ret;
}
