<?php
//$Id$
/**
 *
 * @file video.module
 *
 */

/*
 * Implementation of hook_init().
 */
function video_init() {
  drupal_add_css(drupal_get_path('module', 'video'). '/css/video.css');
  drupal_add_js(drupal_get_path('module', 'video'). '/js/video.js');
}

/**
 * Implementation of hook_perm().
 */

function video_perm() {
  return array('bypass conversion video', 'convert on submission', 'override player width', 'use default thumb');
}

/**
 * Implementation of hook_menu().
 */
function video_menu() {
  $items = array();
  $items['admin/settings/video'] = array(
    'title' => 'Video',
    'description' => 'Configure different aspects of the video module and its plugins',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_general_admin_settings'),
    'file' => 'video.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/video/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/settings/video/players'] = array(
    'title' => 'Players',
    'description' => 'Configure your player settings for each video extension.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_players_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'video.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/settings/video/transcoders'] = array(
    'title' => 'Transcoders',
    'description' => 'Configure your transcoder to convert your videos or extra thumbnails.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_transcoder_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'video.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/settings/video/metadata'] = array(
    'title' => 'Metadata',
    'description' => 'Configure your metadata settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_metadata_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'video.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['admin/settings/video/cron'] = array(
    'title' => 'Cron Settings',
    'description' => 'Configure your cron settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_cron_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'video.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function video_theme() {
  $theme = array();
  $theme['video_thumbnails'] = array(
    'arguments' => array('file' => NULL, 'alt' => '', 'title' => '', 'attributes' => NULL, 'getsize' => TRUE),
    'file' => 'video.theme.inc',
  );
  $theme['video_widget_preview'] = array(
    'arguments' => array('item' => TRUE),
    'file' => 'video.theme.inc',
  );
  $theme['video_image'] = array(
    'arguments' => array('file' => NULL, 'alt' => '', 'title' => '', 'attributes' => NULL, 'getsize' => TRUE, 'imagecache' => NULL),
    'file' => 'video.theme.inc',
  );
  $theme['video_widget_video_thumb'] = array(
    'arguments' => array('item' => TRUE),
    'file' => 'video.theme.inc',
  );
  $theme['video_formatter_video_plain'] = array(
    'arguments' => array('element' => NULL),
    'file' => 'video_formatter.inc',
  );
  $theme['video_formatter_video_nodelink'] = array(
    'arguments' => array('element' => NULL, 'imagecache' => NULL),
    'file' => 'video_formatter.inc',
  );
  $theme['video_formatter_video_colorbox'] = array(
    'arguments' => array('element' => NULL, 'imagecache' => NULL),
    'file' => 'video_formatter.inc',
  );
  $theme['video_formatter_video_media_js'] = array(
    'arguments' => array('element' => NULL),
    'file' => 'video_formatter.inc',
  );
  $theme['video_encoding_failed'] = array(
    'arguments' => array(),
    'file' => 'video_formatter.inc',
  );
  $theme['video_inprogress'] = array(
    'arguments' => array(),
    'file' => 'video_formatter.inc',
  );
  
  $path = drupal_get_path('module', 'video'). '/theme';
  //Lets setup our themes for our players
  $players = video_video_players();
  foreach($players as $tpl => $value) {
    $theme[$tpl] = array(
      'arguments' => array('video' => NULL, 'node' => NULL, 'themed_output' => NULL),
      'file' => 'video_formatter.inc',
      'template' => str_replace('_', '-', $tpl),
      'path' => $path,
    );
  }
  //We need to add an flv theme buffer to allow users to override in their own module to add in extra parameters before
  //calling our flv template file.
  $theme['video_flv'] = array(
    'arguments' => array('video' => NULL, 'node' => NULL),
    'file' => 'video_formatter.inc'
  );
  
  //setup our imagecache presets
  if(module_exists('imagecache')) {
    //we need formatters for each of our thumbnails.
    //@todo create a function to check for our colorbox module and only add theme elements that could be used.
    $thumb_types = array('video_colorbox', 'video_nodelink');
    foreach($thumb_types as $types) {
      foreach (imagecache_presets() as $preset) {
        $theme['video_formatter_'. $preset['presetname'] .'__'. $types] = array(
          'arguments' => array('element' => NULL),
          'function' => 'theme_video_formatter_imagecache',
          'file' => 'video_formatter.inc'
        );
      } 
    }
  }
  return $theme;
}

/**
 * Implementation of CCK's hook_field_formatter_info().
 */
function video_field_formatter_info() {
  $formatters = array(
    'video_plain' => array(
      'label' => t('Video'),
      'field types' => array('filefield'),
      'description' => t('Displays video files with player embedded.'),
    ),
    'video_nodelink' => array(
      'label' => t('Video Thumbnail linked to node'),
      'field types' => array('filefield'),
      'description' => t('Displays the video thumbnail and links to the node.'),
    ),
    'video_colorbox' => array(
      'label' => t('Video Thumbnail to Colorbox'),
      'field types' => array('filefield'),
      'description' => t('Displays the video thumbnail and adds colorbox support.'),
    ),
    'video_media_js' => array(
      'label' => t('Video inject with jMedia'),
      'field types' => array('filefield'),
      'description' => t('Displays the video by using jmedia javascript.'),
    ),
  );
  //setup our imagecache presets
  if(module_exists('imagecache')) {
    //we need formatters for each of our thumbnails.
    $thumb_types = array('video_colorbox', 'video_nodelink');
    foreach($thumb_types as $types) {
      foreach (imagecache_presets() as $preset) {
        $formatters[$preset['presetname'] .'__'. $types] = array(
            'label' => t('@preset @label', array('@preset' => $preset['presetname'], '@label' => $formatters[$types]['label'])),
            'field types' => array('filefield'),
        );
      } 
    }
  }
  return $formatters;
}

/*
 * Implmentation of hook_cron().
 */
function video_cron() {
  if (variable_get('video_cron', FALSE)) {
    module_load_include('inc', 'video', '/includes/conversion');
    $video_conversion = new video_conversion;
    $video_conversion->run_queue();
  }
}

function video_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    $form['buttons']['submit']['#submit'][] = 'video_node_update_submit';
  }
}

function video_node_update_submit($form, &$form_state) {
  //lets update our video rending table to include the node id created
  if (isset($form_state['nid']) && isset($form_state['values']['video_id']) && is_array($form_state['values']['video_id'])) {
    foreach($form_state['values']['video_id'] as $fid) {
      //lets update our table to include the nid
      db_query("UPDATE {video_rendering} SET pid=%d WHERE fid=%d", $form_state['nid'], $fid);
    }
  }
}

/*
 * Utility function that will add a preview of thumbnails for you to select when uploading videos.
 */
function video_thumb_process(&$element) {
  // Developed for ffmpeg support
  $file = $element['#value'];
  if (isset($element['preview']) && $file['fid'] != 0) {
    module_load_include('inc', 'video', '/includes/transcoder');
    $transcoder = new video_transcoder;
    if($thumbs = $transcoder->generate_thumbnails($file)) {
      $default_thumb = '';
      $rnd_img = rand(0, variable_get('no_of_video_thumbs', 5) - 1);
      $default_thumb = $thumbs[$rnd_img]->filepath;

      if(is_array($thumbs)) {
        foreach($thumbs as $fid => $img) {
          $thumbss[$img->filepath] = theme('video_thumbnails', $img, '', '', array('width' => '50'), FALSE);
        }
      }
    }

    $element['data']['video_thumb'] = array(
      '#type' => 'radios',
      '#title' => t('Video Thumbnails'),
      '#options' => $thumbss,
      '#default_value' => !empty($file['data']['video_thumb']) ? $file['data']['video_thumb'] : $default_thumb,
      '#weight' => 10,
      '#attributes' => array('class' => 'video-thumbnails', 'onchange' => 'videoftp_thumbnail_change()'),
    );

    // Setup our large thumbnail that is on the left.
    // @todo Add smaller video preview instead of thumbnail?
    if (!empty($file['data']['video_thumb'])) {
      $large_thumb = array('filepath' => $file['data']['video_thumb']);
    }
    elseif (!empty($field['widget']['default_video_thumb'])) {
      $large_thumb = $field['widget']['default_video_thumb'];
    }
    else {
      $large_thumb = array('filepath' => $default_thumb);
    }
    // @todo Integrate the thumbnails with imagecache.
    $element['preview']['#suffix'] = '<div class="video_large_thumbnail">'. theme('video_thumbnails', $large_thumb, '', '', array('width' => '150'), FALSE) .'</div>';
  }
}

/**
 * Adds a video to the video rendering table.
 *
 * If auto converting, it will convert your video to flv right now.  We are passing the element by reference
 * just in case we ever want to add more to the element during this process.
 *
 * @param $element
 *   Form element to get the video file from.
 */
function video_convert_process(&$element) {
  $file = $element['#value'];
  $convert = false;
  //we need to check if this fid has already been added to the database AND that there is in fact a fid
  if (is_array($file) && isset($file['fid']) && !empty($file['fid']) && !$file['data']['bypass_autoconversion']) {
    $fid = $file['fid'];
    //setup our conversion class and check for the fid existence.
    module_load_include('inc', 'video', '/includes/conversion');
    $video_conversion = new video_conversion;
    // Is this is an update?
    $old_fid = $element['#default_value']['fid'];
    $serialized_data['old_file'] = $old_fid;
    if ($old_fid != $fid) {
      db_query('DELETE FROM {video_rendering} WHERE fid = %d', $old_fid);
    }
    // Lets verify that we haven't added this video already.  Multiple validation fails will cause this to be ran more than once
    if(!$video = $video_conversion->load_video($fid)) {
      // Video has not been added to the que yet so lets add it.
      db_query('INSERT INTO {video_rendering} (fid, pid, status, started, completed, serialized_data) VALUES (%d, %d, %d, %d, %d, \'%s\')', $fid, 0, VIDEO_RENDERING_PENDING, 0, 0, serialize($serialized_data));
      $convert = true;
    }

    // Our video should be in the database pending, lets see if we need to convert it now.
    // Check if we are going from unselected to selected or if this is a new video and we have checked the checkbox
    if (((!isset($element['#default_value']['data']['convert_video_on_save']) || !$element['#default_value']['data']['convert_video_on_save']) && $file['data']['convert_video_on_save']) || ($convert && $file['data']['convert_video_on_save'])) {
      if (!$video_conversion->process($fid)) {
        drupal_set_message(t('Something went wrong with your video conversion.  Please check your recent log entries for further debugging.'), 'error');
      }
      else {
        drupal_set_message(t('Successfully converted your video.'));
      }
    }
    elseif ($convert) {
      drupal_set_message(t('Video submission queued for processing. Please wait: our servers are preparing your video for display.'));
      //lets set que our node status to unpublished.
      $element['#unpublish'] = true;
    }
  }
}

/**
 * Implementation of hook_file_delete().
 */
function video_file_delete($file) {
  db_query('DELETE FROM {video_rendering} WHERE fid = %d', $file->fid);
}

/**
 * Compares passed extensions with normal video web extensions.
 */
function video_web_extensions($ext) {
  $extensions = array_filter(explode(' ', $ext));
  $web_extensions = array(
      'mov', 'mp4', '3gp', '3g2', 'mpg', 'mpeg', // quicktime
      'divx', //divx
      'rm', // realplayer
      'flv', 'f4v', //flash player
      'swf', // swf player
      'dir', 'dcr', // dcr player
      'asf', 'wmv', 'avi', 'mpg', 'mpeg', // windows media
      'ogg',
      'ogv', // ogg/ogv theora
  );
  if (count(array_diff($extensions, $web_extensions))) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implementation of hook_views_api().
 */
function video_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'video') . '/views',
  );
}

function video_widget_element_settings(&$element) {
  $file = $element['#value'];
  $field = content_fields($element['#field_name'], $element['#type_name']);
  // Check if using the default width and replace tokens.
  $default_width = user_access('override player width');
  $element['data']['width'] = array(
      '#type' => $default_width ? 'textfield' : 'value',
      '#title' => t('Width for Player'),
      '#value' => !isset($file['data']['width']) || empty($file['data']['width']) ? $field['widget']['default_width'] : $file['data']['width'],
      '#description' => t('Set player width(in px) here, make sure your video has good resolution to fit on larger values.'),
      '#size' => 15,
      '#maxlength' => 5,
      '#attributes' => array('class' => 'video-width-text'),
  );

  // only in preview mode and then create thumbnails
  if($field['widget']['autoconversion']) {
    if (user_access('bypass conversion video')) {
      $element['data']['bypass_autoconversion'] = array(
        '#type' => 'checkbox',
        '#title' => t('Bypass auto conversion'),
        '#default_value' => !empty($file['data']['bypass_autoconversion']) ? $file['data']['bypass_autoconversion'] : variable_get('video_bypass_conversion', FALSE),
        '#description' => t('This will bypass your auto conversion of videos.'),
        '#attributes' => array('class' => 'video-bypass-auto-conversion'),
      );
    }

    $convert_on_submission = user_access('convert on submission');
    $element['data']['convert_video_on_save'] = array(
     '#type' => $convert_on_submission ? 'checkbox' : 'value',
     '#title' => t('Convert video on save'),
     '#default_value' => !empty($file['data']['convert_video_on_save']) ? $file['data']['convert_video_on_save'] : variable_get('video_convert_on_save', FALSE),
     '#description' => t('This will convert your video to flv format when you save, instead of scheduling it for cron.'),
     '#attributes' => array('class' => 'video-convert-video-on-save'),
    );

    $use_default_thumb = user_access('use default thumb');
    if ($use_default_thumb) {
      $element['data']['use_default_video_thumb'] = array(
       '#type' => $use_default_thumb ? 'checkbox' : 'value',
       '#title' => t('Use the default thumbnail for this video?'),
       '#default_value' => !empty($file['data']['use_default_video_thumb']) ? $file['data']['use_default_video_thumb'] : variable_get('video_use_default_thumb', FALSE),
       '#description' => t('This will set a flag for this video to use the default video thumbnail when outputed..'),
       '#attributes' => array('class' => 'video-use-default-video-thumb'),
      );
    }
  }
}

function video_video_extensions() {
  $extensions = array(
    'divx' => 'video_play_divx',
    'mov' => 'video_play_quicktime',
    '3gp' => 'video_play_quicktime',
    '3g2' => 'video_play_quicktime',
    'mp4' => 'video_play_quicktime',
    'rm' => 'video_play_realmedia',
    'f4v' => 'video_play_flv',
    'flv' => 'video_play_flv',
    'swf' => 'video_play_flash',
    'dir' => 'video_play_dcr',
    'dcr' => 'video_play_dcr',
    'asf' => 'video_play_windowsmedia',
    'wmv' => 'video_play_windowsmedia',
    'avi' => 'video_play_windowsmedia',
    'mpg' => 'video_play_windowsmedia',
    'mpeg' => 'video_play_windowsmedia',
    'ogg' => 'video_play_theora',
  	'ogv' => 'video_play_theora',
  );
  return $extensions;
}

function video_video_players() {
  $players = array(
    'video_play_divx' => t('Divx Player'),
    'video_play_quicktime' => t('Quicktime'),
    'video_play_realmedia' => t('Real Media Player'),
    'video_play_flv' => t('FLV Flash Players'),
    'video_play_flash' => t('SWF Flash Player'),
    'video_play_dcr' => t('Director/Shockwave'),
    'video_play_windowsmedia' => t('Windows Media Player'),
    'video_play_theora' => t('Theora Player'),
  );
  return $players;
}

function video_video_flv_players() {
  $options = array();
  if(module_exists('swftools')) {
    $options['swftools'] = t('SWF Tools');
  }
  if(module_exists('flowplayer')) {
    $options['flowplayer'] = t('Flowplayer');
  }
  return $options;
}

/**
 * Get the object for the suitable player for the parameter resource
 */
function video_get_player($element) {
  // Get extension of the video file so we know how to output it.
  $file = pathinfo($element['#item']['filename']);
  $op = $file['extension'];
  
  // Lets spit out our theme based on the extension
  $defaults = video_video_extensions();
  $theme_function = variable_get('video_extension_'.$op, $defaults[$op]);
  
  // Setup our node object to be passed along with the player.
  $node = $element['#node'];
  
  //setup our video object
  module_load_include('inc', 'video', '/includes/video_helper');
  $video_helper = new video_helper;
  $video = $video_helper->video_object($element);
  
  //@todo Each player/object output potentially has different heights.  How are we going to handle that?
  //players tab maybe?  Then add our height in?
  //$video->height += player_tab_height()?
  
  // Lets do some special handling for our flv files to accomdate multiple players.
  if($theme_function == 'video_play_flv') {
    return theme('video_flv', $video, $node);
  }
  else {
    return theme($theme_function, $video, $node);
  }
}

function video_default_widget_settings($widget) {
  $form = array();
  // Default video settings.
  $form['plugins'] = array(
    '#type' => 'fieldset',
    '#title' => t('Video Advanced Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 10
  );
  $form['plugins']['default_resolution'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Video Resolution'),
    '#default_value' => !empty($widget['default_resolution']) ? $widget['default_resolution'] : '16:9',
    '#size' => 15,
    '#maxlength' => 5,
    '#description' => t('Default player resolution WIDTH:HEIGHT in px. eg : 16:9 for widescreen or 4:3 for general screen'),
  );
  $form['plugins']['default_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Video Player Width'),
    '#default_value' => !empty($widget['default_width']) ? $widget['default_width'] : 640,
    '#size' => 15,
    '#maxlength' => 5,
    '#description' => t('Default player WIDTH:HEIGHT in px. eg : 640 for 640X480 player size if resolution it 4:3'),
  );
  $form['plugins']['autoconversion'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable video conversion.'),
    '#description' => t('Use ffmpeg(Default) to automatically convert videos to web compatible types eg. FLV, Please make sure to configure your transcoder settings.'),
    '#default_value' => $widget['autoconversion'],
  );
  $form['plugins']['autothumbnail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable thumbnail creation.'),
    '#description' => t('Use ffmpeg(Default) to create thumbnails, Please make sure to configure your transcoder settings.'),
    '#default_value' => $widget['autothumbnail'],
  );
  // Default thumbnail settings.
  $form['default'] = array(
      '#type' => 'fieldset',
      '#title' => t('Video Thumbnail Settings'),
      '#element_validate' => array('video_default_widget_settings_validate'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => 10
  );
  // Present a video image of the current default image.
  if (!empty($widget['default_video_thumb'])) {
    $form['default']['default_video_thumbnail'] = array(
        '#type' => 'markup',
        '#value' => theme('video_image', $widget['default_video_thumb'], '', '', array('width' => '150'), FALSE),
        '#prefix' => '<div class="video_thumbnail">',
        '#suffix' => '</div>'
    );
  }
  $form['default']['default_video_thumb_upload'] = array(
      '#type'  => 'file',
      '#title' => empty($widget['default_video_thumb']) ? t('Upload video thumbnail') :  t('Replace video thumbnail with'),
      '#description' => t('Choose a image that will be used as default video thumbnail.'),
  );
  // We set this value on 'validate' so we can get CCK to add it
  // as a standard field setting.
  $form['default_video_thumb'] = array(
      '#type' => 'value',
      '#value' => $widget['default_video_thumb'],
  );
  return $form;
}

/**
 * Element specific validation for video default value.
 *
 */
function video_default_widget_settings_validate($element, &$form_state) {
  // Verify the destination exists
  $destination = file_directory_path() .'/video_thumb';
  if (!field_file_check_directory($destination, FILE_CREATE_DIRECTORY)) {
    form_set_error('default_video_thumb', t('The default image could not be uploaded. The destination %destination does not exist or is not writable by the server.', array('%destination' => dirname($destination))));
    return;
  }

  $validators = array (
      'file_validate_is_image' => array(),
  );

  // We save the upload here because we can't know the correct path until the file is saved.
  if (!$file = file_save_upload('default_video_thumb_upload', $validators, $destination)) {
  // No upload to save we hope... or file_save_upload() reported an error on its own.
    return;
  }

  // Remove old image (if any) & clean up database.
  $old_default = $form_state['values']['default_video_thumb'];
  if (!empty($old_default['fid'])) {
    if (file_delete(file_create_path($old_default['filepath']))) {
      db_query('DELETE FROM {files} WHERE fid=%d', $old_default['fid']);
    }
  }

  // Make the file permanent and store it in the form.
  file_set_status($file, FILE_STATUS_PERMANENT);
  $file->timestamp = time();
  $form_state['values']['default_video_thumb'] = (array)$file;
}