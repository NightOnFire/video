<?php

/**
 * @file
 * Provides installation schema for video.module
 * @author Heshan Wanigasooriya <heshan@heidisoft.com>
 * 
 */

/**
 * @file
 * Provide installation functions for video.module .
 *
 * @author Heshan Wanigasooriya <heshan at heidisoft dot com>
 *                              <heshanmw at gmail dot com>
 * @todo
 */

/**
 * Implementation of hook_schema().
 */
function video_schema() {
<<<<<<< HEAD
  $schema['video'] = array(
    'description' => t('Store video files informations'),
    'fields' => array(
      'vid' => array(
        'description' => t('Prmary Key: {video}.vid of the video node'),
        'type' => 'int',
=======
  // video files
  $schema['video_files'] = array(
    'description' => 'Store video transcoding queue.',
    'fields' => array(
      'vid' => array(
        'description' => t('Video id, the primary identifier'),
        'type' => 'serial',
>>>>>>> 7.x-1.x
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
<<<<<<< HEAD
      'nid' => array(
        'description' => t('Node id, index to the {node}.nid'),
=======
      'fid' => array(
        'description' => 'The {file_managed}.fid being referenced in this field.',
>>>>>>> 7.x-1.x
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
<<<<<<< HEAD
      ),      
      'vtype' => array(
        'description' => t('The type of the video'),
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'vidfile' => array(
        'description' => t('Video file name / path'),
        'type' => 'text',
        'not null' => FALSE,
        'default' => '',
      ),
      'videox' => array(
        'description' => t('resolution : x'),
=======
      ),
      'nid' => array(
        'description' => 'The {node}.nid being referenced in this field.',
>>>>>>> 7.x-1.x
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
<<<<<<< HEAD
      'videoy' => array(
        'description' => t('resolution : y'),
=======
      'status' => array(
        'description' => 'Status of the transcoding, possible values are 1, 5, 10, 20',
>>>>>>> 7.x-1.x
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
<<<<<<< HEAD
      'size' => array(
        'description' => t('size of the video file'),
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'download_counter' => array(
        'description' => t('No. of downloads of the video'),
=======
      'dimensions' => array(
        'description' => 'The dimensions of the output video.',
        'type' => 'varchar',
        'length' => '255',
        'default' => '',
      ),
      'started' => array(
        'description' => t('Start timestamp of transcodings'),
>>>>>>> 7.x-1.x
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
<<<<<<< HEAD
      'play_counter' => array(
        'description' => t('No. of play times per video'),
=======
      'completed' => array(
        'description' => 'Transcoding completed timestamp',
>>>>>>> 7.x-1.x
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
<<<<<<< HEAD
      'video_bitrate' => array(
        'description' => t('Bit rate of the video'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'audio_bitrate' => array(
        'description' => t('Bit rate of the audio'),
        'type' => 'int',
        'unsigned' => TRUE,
=======
      'data' => array(
        'type' => 'blob',
>>>>>>> 7.x-1.x
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of converted files.
          Use of this field is discouraged and it will likely disappear in a future version of Drupal.',
      ),
<<<<<<< HEAD
      'audio_sampling_rate' => array(
        'description' => t('Sampling rate of the video'),
        'type' => 'int',
=======
    ),
    'indexes' => array(
      'status' => array('status'),
      'file' => array('fid'),
    ),
    'primary key' => array('vid'),
  );
  // video preset
  $schema['video_preset'] = array(
    'description' => 'The preset table.',
    'fields' => array(
      'pid' => array(
        'description' => 'The primary identifier for a video preset.',
        'type' => 'serial',
>>>>>>> 7.x-1.x
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
<<<<<<< HEAD
      'audio_channels' => array(
        'description' => t('Chenells of the audio'),
        'type' => 'text',
        'not null' => FALSE,
      ),
      'playtime_seconds' => array(
        'description' => t('Play time of the video'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'download_folder' => array(
        'description' => t('download folder'),
        'type' => 'varchar',
        'length' => 255,
=======
      'name' => array(
        'description' => 'The name of this preset.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A brief description of this preset.',
        'type' => 'text',
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'settings' => array(
        'type' => 'blob',
>>>>>>> 7.x-1.x
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'Serialized preset settings that do not warrant a dedicated column.
          Use of this field is discouraged and it will likely disappear in a future version of Drupal.',
      ),
<<<<<<< HEAD
      'disable_multidownload' => array(
        'description' => t('enable/disable multi download'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'use_play_folder' => array(
        'description' => t('use play folder'),
=======
    ),
    'unique keys' => array(
      'name' => array('name'),
    ),
    'primary key' => array('pid'),
  );
  // video thumbnails
  $schema['video_thumbnails'] = array(
    'description' => 'The video thumbnails table.',
    'fields' => array(
      'vid' => array(
>>>>>>> 7.x-1.x
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
<<<<<<< HEAD
        'default' => 0,
      ),
      'serialized_data' => array(
        'description' => t('Informations related to the videos'),
        'type' => 'text',
=======
        'description' => 'Foreign Key {video_files}.fid.',
      ),
      'thumbnails' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'Serialized array of thumbnails data.
          Use of this field is discouraged and it will likely disappear in a future version of Drupal.',
      ),
    ),
    'indexes' => array(
      'thumbnail' => array('vid'),
    ),
    'foreign keys' => array(
      'thumbnails' => array(
        'table' => 'video_files',
        'columns' => array('vid' => 'vid'),
      ),
    ),
  );
  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function video_field_schema($field) {
  return array(
    'columns' => array(
      'fid' => array(
        'description' => 'The {file_managed}.fid being referenced in this field.',
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
      ),
      'thumbanail' => array(
        'description' => 'The {file_managed}.fid being referenced for video thumbanil.',
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
      ),
      'player_dimensions' => array(
        'description' => "Video dimention for the video player.",
        'type' => 'varchar',
        'length' => 32,
>>>>>>> 7.x-1.x
        'not null' => FALSE,
      )
    ),
    'indexes' => array(
      'fid' => array('fid'),
    ),
    'foreign keys' => array(
      'fid' => array(
        'table' => 'file_managed',
        'columns' => array('fid' => 'fid'),
      ),
    ),
<<<<<<< HEAD
     'indexes' => array(
     'nid' => array('nid'),
    ),
    'primary key' => array('vid'),
  );

  return $schema;
=======
  );
>>>>>>> 7.x-1.x
}

/**
 * Implementation of hook_install().
 */
function video_install() {
<<<<<<< HEAD
	drupal_install_schema('video');
  
  // default values for some variables use for resolution stuff
  variable_set('video_resolution_1_name', '16:9 - Widescreen');
  variable_set('video_resolution_1_value', '400x226');
  variable_set('video_resolution_2_name', '4:3 - Television');
  variable_set('video_resolution_2_value', '400x300');
=======
  // Create the videos directory and ensure it's writable.
  $directory = file_default_scheme() . '://videos';
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
>>>>>>> 7.x-1.x
}

/**
 * Implementation of hook_uninstall().
 */
function video_uninstall() {
  drupal_uninstall_schema('video');
<<<<<<< HEAD
  variable_del('video_resolution_1_name');
  variable_del('video_resolution_1_value');
  variable_del('video_resolution_2_name');
  variable_del('video_resolution_2_value');
=======
  // remove variables
  db_query("DELETE FROM {variable} WHERE name LIKE 'video_%'");
  // Remove the video directory and generated images.
  file_unmanaged_delete_recursive(file_default_scheme() . '://videos');
>>>>>>> 7.x-1.x
}